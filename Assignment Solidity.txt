pragma solidity ^0.5.0;
contract Address{
    address payable private myAddress= 0xaD335c3c503aBd738Af9a7690FB41f9fadcBE91A;
function setAddress(address payable add) public{
    myAddress= add;
}
function getBalance() public view returns(uint){
    return myAddress.balance;
}
function getAddress() public view returns(address){
    return myAddress;
}
function pay() public payable{
    myAddress.transfer(msg.value);
}




struct Student{
    string name;
    uint age;
    string rollNo;
    address studentAddress;
    bool feePiad;
    bool BSdegree;
    gender studentGender;
    studyMode modeOdStudy;
}
enum gender {male, female}
enum studyMode {online, onsite}
// to record total numbe rof students in the class
uint public numberOfEnrolledStudents;
// total amount collected from students
uint public totalBalance;

function enrollStudent (string memory name, string memory rollNo, bool feePaid, bool BSdegree, gender studentGender, studyMode modeOfStudy) public payable returns (string memory, string memory){
    //   student has to pay 2 ether to enroll in the class
       require(msg.value>= 2) ;
       require(myAddress!= msg.sender);
       myAddress.transfer(msg.value);
       totalBalance += msg.value;
       numberOfEnrolledStudents ++;
 }
mapping (string => Student) studentRecord;
function student_Record(string memory rollNo) public view returns(Student){
    student_Record[rollNo]= Student;
}
   


    
    
}




 
 

     
     
 
 
 
  
   


     
     
     
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 


     
 
 
 
 
 
 
 
 















 

     
      
     
 
 
 
  
   


     
     
     
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 


     
 
 
 
 
 
 
 
 

 
 

     
     
 
 
 
  
   


     
     
     
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 


     
 
 
 
 
 
 
 
 















 

     
      












 

     
      
 
 
 
 
 
 
 















 

     
      